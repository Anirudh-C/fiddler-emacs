* strange-loop-emacs
** Setup =package.el=
Load =package.el=
#+BEGIN_SRC emacs-lisp
(require 'package)
#+END_SRC
Add common package archives
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "https://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
#+END_SRC
Don't load outdated byte code
#+BEGIN_SRC emacs-lisp
  (setq load-prefer-newer t)
#+END_SRC
Ensure that packages aren't loaded again after processing the init file
#+BEGIN_SRC emacs-lisp
  (setq package-enable-at-startup nil)
#+END_SRC
Initialize the package installation
#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC
Customize puts a lot of stuff into my =init.el=
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC

** Configure =use-package=
Install =use-package= if not installed
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
Load =use-package= while compiling
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
#+END_SRC

** Tell Emacs who I am
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Anirudh C"
      user-mail-address "anirudh.c@iiitb.org")
#+END_SRC

** Cosmetics
I don't like the default startup area message
#+BEGIN_SRC emacs-lisp
  (defun display-startup-echo-area-message ()
    "My startup message"
    (message "Welcome to Strange Loop Emacs"))
#+END_SRC
I don't like the default alert sound of emacs and would like a mode-line flash
#+begin_src emacs-lisp
  (setq visible-bell nil
        ring-bell-function 'strange-loop/flash-mode-line)

  (defun strange-loop/flash-mode-line ()
    "Flash the modeline; can be used instead of bell"
    (invert-face 'mode-line)
    (run-with-timer 0.1 nil #'invert-face 'mode-line))
#+end_src
Start Emacs clients in full screen
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
#+end_src
*** Theme
I need emacs to look exactly like I want it to, so
start by removing the default startup buffer
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+END_SRC
Also remove the scrollbar, menubar and toolbar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(when (boundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
#+END_SRC 
When I use emacs I deal with a lot of parentheses, I want emacs
to match them for me and do it colourfully using =rainbow-delimiters=
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
I also use tabs(size 4) in emacs but I don't want TeX to get confused
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq tab-width 4)
#+END_SRC
I also don't want emacs telling me I'm opening a large file
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold nil)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC
I also want emacs to tell me which column I am in the buffer
#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC
I don't like trailing whitespaces as it messes so many things up
#+BEGIN_SRC emacs-lisp
  (defun strange-loop/buf-show-trailing-whitespace ()
    "Show trailing whitespaces in buffer"
    (interactive)
    (setq show-trailing-whitespace t))
  (add-hook 'prog-mode-hook 'strange-loop/buf-show-trailing-whitespace)
#+END_SRC 
Use =Iosevka= font
#+BEGIN_SRC emacs-lisp
  (add-to-list 'default-frame-alist
               '(font . "Iosevka-13"))
#+END_SRC
Use =emacs-dracula= cuz it matches the rest of the aesthetic on my system
#+BEGIN_SRC emacs-lisp
  (use-package dracula-theme
    :ensure t
    :config
    (load-theme 'dracula t))
#+END_SRC
Set trailing whitespace colour
#+begin_src emacs-lisp
  (custom-set-faces
 '(trailing-whitespace ((t (:background "#6272a4")))))
#+end_src
*** Modeline
Use =telephone-line=
#+BEGIN_SRC emacs-lisp
  (use-package telephone-line
    :ensure t
    :config
    ;; Define custom face for modified indicator
    (defface strange-loop-cyan '((t (:foreground "#62D2DB" :background "#191f26"))) "")
    ;; Define telephone-line faces
    (setq telephone-line-faces
          '((cyan . (strange-loop-cyan . strange-loop-cyan))
            (accent . (telephone-line-accent-active . telephone-line-accent-inactive))
            (nil . (mode-line . mode-line-inactive))))
    ;; Custom Segments
    (require 'telephone-line-utils)
    (telephone-line-defsegment telephone-line-god-segment ()
      (telephone-line-raw (if god-local-mode "<G>")))
    ;; Left Modules
    (setq telephone-line-lhs
          '((cyan . (telephone-line-buffer-modified-segment))
            (accent . (telephone-line-vc-segment))
            (nil    . (telephone-line-projectile-buffer-segment))))
    ;; Right Modules
    (setq telephone-line-rhs
          '((nil . (telephone-line-misc-info-segment))
            (cyan . (telephone-line-god-segment))
            (accent . (telephone-line-major-mode-segment))))
    ;; Define the separators
    (setq telephone-line-primary-left-separator 'telephone-line-cubed-left
        telephone-line-secondary-left-separator 'telephone-line-cubed-left
        telephone-line-primary-right-separator 'telephone-line-cubed-right
        telephone-line-secondary-right-separator 'telephone-line-cubed-right)
    (setq telephone-line-height 24)

    (telephone-line-mode))
#+END_SRC

** User Interface
Window manager uses Alt as modifier
#+BEGIN_SRC emacs-lisp
(setq x-super-keysym 'meta)
#+END_SRC
Would be fun to =try= out packages
#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC
Also I need to be able to edit my config in emacs and =restart-emacs=
in emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :ensure t)
#+END_SRC
Make a scratch buffer from thin air
#+BEGIN_SRC emacs-lisp
(defun strange-loop/gen-scratch ()
  "Create and switch to a temporary scratch buffer with a random name."
  (interactive)
  (switch-to-buffer (make-temp-name "scratch-")))
#+END_SRC
Enable buffer narrowing
#+BEGIN_SRC emacs-lisp
  (put 'narrow-to-defun 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-region 'disabled nil)
#+END_SRC
Renaming files becomes easier
#+BEGIN_SRC emacs-lisp
(defun strange-loop/rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "FNew name: ")
  (let ((name (buffer-name))
        (filename (buffer-file-name)))
    (if (not filename)
        (message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
          (message "A buffer named '%s' already exists!" new-name)
        (progn
          (rename-file filename new-name 1)
          (rename-buffer new-name)
          (set-visited-file-name new-name)
          (set-buffer-modified-p nil))))))
#+END_SRC
Edit a file in sudo on the fly
#+BEGIN_SRC emacs-lisp
  (defun strange-loop/find-file-sudo ()
    "Find file as root if necessary."
    (interactive)
    (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name)))
#+END_SRC
Undoing and redoing using =undo-tree= only
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode))
#+END_SRC
Make redo the redo of undo-tree
#+BEGIN_SRC emacs-lisp
(defalias 'redo 'undo-tree-redo)
#+END_SRC
Capture note with buffer
#+begin_src emacs-lisp
  (defun strange-loop/capture-note ()
    "Org mode generic note-capture in a new buffer"
    (interactive)
    (switch-to-buffer "strange-loop-capture")
    (org-mode))
#+end_src
*** Projects
**** Git
I use git to manage my projects and =magit= provides the interface
and =projectile= is for project specific functionality
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t)
  (global-set-key (kbd "C-x g") 'magit)
  ;; I need to search for files in a project
  (use-package projectile
    :ensure t
    :config
    (projectile-mode)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (setq projectile-completion-system 'ivy))
#+END_SRC
I also don't need backup and autosave files because I use git
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil
      auto-save-default nil)
#+END_SRC
*** Completion
Use =ivy= for completion
#+BEGIN_SRC emacs-lisp
(use-package ivy 
  :ensure t
  :diminish (ivy-mode . "")
  :config
  (ivy-mode 1)
  ;; add ‘recentf-mode’ and bookmarks to ‘ivy-switch-buffer’.
  (setq ivy-use-virtual-buffers t)
  ;; number of result lines to display
  (setq ivy-height 10)
  ;; does not count candidates
  (setq ivy-count-format "")
  ;; no regexp by default
  (setq ivy-initial-inputs-alist nil)
  ;; configure regexp engine.
  (setq ivy-re-builders-alist
	;; allow input not in order
        '((t   . ivy--regex-ignore-order))))
#+END_SRC
Ensure fuzzy search happens using =flx=
#+BEGIN_SRC emacs-lisp
  (use-package flx
    :ensure t)
#+END_SRC
Setup =counsel= for additional completion
#+BEGIN_SRC emacs-lisp
    (use-package counsel
      :after ivy
      :ensure t
      :config
      (counsel-mode)
      (global-set-key (kbd "M-x") 'counsel-M-x)
      (global-set-key (kbd "C-x C-f") 'counsel-find-file)
      (global-set-key (kbd "C-x s") 'counsel-git-grep))
#+END_SRC
Make the buffer listing more complete using =ivy-rich=
#+BEGIN_SRC emacs-lisp
  (use-package ivy-rich
    :ensure t
    :after ivy
    :config
    (ivy-rich-mode))
#+END_SRC
Setup =swiper= for search
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :after ivy
    :bind (("C-s" . swiper)))
#+END_SRC
*** File Management
Use =neotree=
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (require 'neotree)
    (global-set-key (kbd "C-S-n") 'neotree-toggle)
    (setq neo-theme 'nerd))
#+END_SRC

*** Multiple Cursors
Use =multiple-cursors= behaviour
#+BEGIN_SRC emacs-lisp
  (use-package multiple-cursors
    :ensure t
    :config
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this))
#+END_SRC

*** Easy Killing
Use =easy-kill= instead of =kill-ring-save=
#+BEGIN_SRC emacs-lisp
  (use-package easy-kill
    :ensure t
    :config
    (global-set-key [remap kill-ring-save] 'easy-kill)
    (global-set-key [remap mark-sexp] 'easy-mark))
#+END_SRC
Browse the kill-ring easily using =browse-kill-ring=
#+BEGIN_SRC emacs-lisp
  (use-package browse-kill-ring
    :ensure t)
#+END_SRC

*** Window Management
Use =ace-window= to manage windows
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
    :ensure t
    :config
    (global-set-key (kbd "M-o") 'ace-window)
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
    (setq aw-background nil))
#+END_SRC

** God Mode
God >> evil
#+BEGIN_SRC emacs-lisp
  (defun strange-loop/update-cursor ()
    "Hook for updating the cursor to indicate God-mode"
    (setq cursor-type (if (or god-local-mode buffer-read-only)
                          'hollow
                        'box)))
  (use-package god-mode
    :ensure t
    :config
    (global-set-key (kbd "<escape>") 'god-local-mode)
    (add-hook 'god-mode-enabled-hook 'strange-loop/update-cursor)
    (add-hook 'god-mode-disabled-hook 'strange-loop/update-cursor)
    (global-set-key (kbd "C-x C-2") 'split-window-below)
    (global-set-key (kbd "C-x C-3") 'split-window-right)
    (define-key god-local-mode-map (kbd ".") 'repeat))
#+END_SRC

** Environments
*** Markdown
Highlighting using =markdown-mode=
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  ;; Tell emacs to use different modes for different types of markdown files,
  ;; that is, use github flavoured markdown for my READMEs and normal markdown everywhere else.
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC

*** Web
Install some dependencies (=rainbow-mode= for colors, =css-mode= for css highlighting)
#+BEGIN_SRC emacs-lisp
;; Understand css
(use-package rainbow-mode
  :ensure t)
(use-package css-mode
  :ensure t
  :config
  ;; hook to get colors in css
  (add-hook 'css-mode-hook (lambda ()
(rainbow-mode))))
#+END_SRC
Install =web-mode= and =emmet-mode=
#+BEGIN_SRC emacs-lisp
  (use-package emmet-mode
    :ensure t
    :commands emmet-mode)

  (use-package web-mode
    :ensure t
    :defer t
    :config
    ;; Indent all my web mode code by 2 instead of 4
    (setq web-mode-attr-indent-offset 2)
    (setq web-mode-code-indent-offset 2)
    (setq web-mode-css-indent-offset 2)
    (setq web-mode-indent-style 2)
    (setq web-mode-markup-indent-offset 2)
    (setq web-mode-sql-indent-offset 2)
    ;; Highlight columns
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-enable-current-element-highlight t))
#+END_SRC
Load =web-mode= in the specific files
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.css?\\'" . web-mode))
#+END_SRC
Add completion vocabulary to css and html when in =web-mode=
#+BEGIN_SRC emacs-lisp
  (use-package company-web
    :ensure t
    :after company
    :config
    (add-hook 'web-mode-hook (lambda ()
                               (set (make-local-variable 'company-backends) '(company-css company-web-html company-files)))))
#+END_SRC
Enable =emmet-mode= in =web-mode=
#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-hook 'emmet-mode)
#+END_SRC
For =emmet-mode= to switch between html and css in the same document
#+BEGIN_SRC emacs-lisp
  (add-hook 'web-mode-before-auto-complete-hooks
            '(lambda ()
               (let ((web-mode-cur-lang
                      (web-mode-language-at-pos)))
                 (if (string= web-mode-cur-lang "css")
                     (setq emmet-use-css-transform t)
                   (setq emmet-use-css-transform nil)))))
#+END_SRC
Setup =impatient-mode=
Dependencies (=simple-httpd= to start http server and =htmlize= for additional functionality)
#+BEGIN_SRC emacs-lisp
(use-package simple-httpd
  :ensure t)
(use-package htmlize
  :ensure t)
#+END_SRC
=impatient-mode=
#+BEGIN_SRC emacs-lisp
(use-package impatient-mode
  :ensure t)
#+END_SRC
**** Javascript
Edit =json= nicely
#+BEGIN_SRC emacs-lisp
  (use-package json-mode
    :ensure t
    :defer t
    :config
  (setq js-indent-level 2))
#+END_SRC
=JSX= and =React=
#+BEGIN_SRC emacs-lisp
  (use-package rjsx-mode
    :ensure t
    :defer t
    :mode (("\\.js\\'" . rjsx-mode))
    :config
    (setq-default rjsx-indent-level 2))
#+END_SRC
=elm-mode=
#+BEGIN_SRC emacs-lisp
(use-package elm-mode
  :ensure t
  :defer t
  :config
  (add-hook 'elm-mode-hook #'elm-oracle-setup-completion)
  (defun company/elm-mode-hook ()
    (add-to-list 'company-backends 'company-elm))
  (add-hook 'elm-mode-hook 'company/elm-mode-hook)
(custom-set-variables '(elm-format-on-save t)))
#+END_SRC

*** Clojure
Install =clojure-mode=
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t)
#+END_SRC
Install =cider= for REPL interaction
#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t)
#+END_SRC

*** PDF
Install and configure =pdf-tools=
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-width))
#+END_SRC

*** Ebooks
Use =nov.el= to open ebooks
#+BEGIN_SRC emacs-lisp
  (use-package nov
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode)))
#+END_SRC

*** Python
Install =elpy=
#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :init
    (elpy-enable))
#+END_SRC
Line numbers in python files
#+begin_src emacs-lisp
  (add-hook 'python-mode-hook 'linum-mode)
#+end_src
*** Drawing
Install =artist-mode=
#+BEGIN_SRC emacs-lisp
  (require 'artist)
#+END_SRC

** Org Mode
Install org-plus-contrib
#+begin_src emacs-lisp
  (use-package org
    :ensure org-plus-contrib)
#+end_src

*** Display
How I want org-mode to look
#+BEGIN_SRC emacs-lisp
  ;; Tell emacs to start org mode in all .org files
  (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
  ;; Hide the leading stars and start org mode with indented structure
  (setq org-hide-leading-stars t
        org-startup-indented t
        org-startup-folded t)
  ;; Use the nice down arrow to display folded content in org headlines
  (setq org-ellipsis "⤵")
#+END_SRC
=org-bullets= need to look good
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC
The emphasis markers in org mode aren't the *best*
#+BEGIN_SRC emacs-lisp
(setq org-hide-emphasis-markers t)
#+END_SRC
I want alphabetical lists as well
#+begin_src emacs-lisp
  (setq org-list-allow-alphabetical t)
#+end_src

*** Org Roam
=org-roam= is an amazing way to build a concept mapping system and overall org 
#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :hook
    (after-init . org-roam-mode)
    :custom
    (org-roam-directory "~/org/brain")
    :bind (:map org-roam-mode-map
                (("C-c n l" . org-roam)
                 ("C-c n f" . org-roam-find-file)
                 ("C-c n j" . org-roam-jump-to-index)
                 ("C-c n b" . org-roam-switch-to-buffer)
                 ("C-c n g" . org-roam-graph))
                :map org-mode-map
                (("C-c n i" . org-roam-insert))))
#+END_SRC
Use =deft= to read/filter the notes and setup =el-patch= to handle the titles
#+BEGIN_SRC emacs-lisp
  (use-package deft
    :ensure t
    :after org
    :bind
    ("C-c n d" . deft)
    :custom
    (deft-recursive t)
    (deft-use-filter-string-for-filename t)
    (deft-default-extension "org")
    (deft-directory "~/org/brain"))
#+END_SRC

*** Tasks and Org-Capture
**** Basic Setup
I have all my org files in a directory =~/org/= and I also have an index file which has all my TODOs in an outline and
I also have an archive file to archive my completed TODOs.
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
#+END_SRC
I need a helper function to point to my orgfiles' absolute path using the relative path
#+BEGIN_SRC emacs-lisp
(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC
Now I can set my index file location
#+BEGIN_SRC emacs-lisp
(setq org-index-file (org-file-path "index.org"))
#+END_SRC
I can also setup my archive file
#+BEGIN_SRC emacs-lisp
(setq org-archive-location
      (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC
I also setup a variable journal file
#+begin_src emacs-lisp
  (setq org-journal-file
        (concat (file-name-as-directory "~/org/journals") "journal.org"))
#+end_src
I need org-agenda to tell me my TODOs
#+BEGIN_SRC emacs-lisp
  (setq strange-loop/org-agenda-files (list org-index-file))
  (setq org-agenda-files strange-loop/org-agenda-files)
#+END_SRC
I want to archive my TODOs into =archive.org= when I finish them
#+BEGIN_SRC emacs-lisp
(defun done-and-dusted ()
  "Mark the state of an org-mode item as DONE and archive it."
  (interactive)
  (org-todo 'done)
  (org-archive-subtree))
#+END_SRC
I want to know when I did these tasks as well
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC
**** Pomodoro
Notification callback using =zenity= for pomodoro timer
#+begin_src emacs-lisp
  (defun strange-loop/notify (text)
    "Callback to zenity to create notification"
    (call-process "zenity"
                  nil t nil
                  "--notification"
                  "--window-icon=info"
                  (concat "--text=\"" text "\"")))
#+end_src
Get =org-pomodoro= for that sweet efficiency
#+begin_src emacs-lisp
  (use-package org-pomodoro
    :ensure t)

  (setq org-pomodoro-length 25
        org-pomodoro-short-break-length 5
        org-pomodoro-long-break-length 20
        org-pomodoro-play-sounds t
        org-pomodoro-start-sound-p t
        org-pomodoro-finished-sound-p t
        org-pomodoro-short-break-sound-p t
        org-pomodoro-long-break-sound-p t
        org-pomodoro-audio-player
        "/usr/bin/vlc -Idummy --play-and-exit")

  (setq org-pomodoro-start-sound
        (expand-file-name "/usr/share/sounds/Pop/stereo/notification/theme-demo.oga")
        org-pomodoro-finished-sound
        (expand-file-name "/usr/share/sounds/Pop/stereo/notification/complete.oga")
        org-pomodoro-short-break-sound
        (expand-file-name "/usr/share/sounds/Pop/stereo/action/bell.oga")
        org-pomodoro-long-break-sound
        (expand-file-name "/usr/share/sounds/Pop/stereo/action/bell.oga"))

  (global-set-key (kbd "M-p") 'org-pomodoro)

  (add-hook 'org-pomodoro-started-hook
            (lambda ()
              (strange-loop/notify (format "%s started! Focus.." org-clock-heading))))

  (add-hook 'org-pomodoro-finished-hook
            (lambda ()
              (strange-loop/notify (format "Time for a break from %s" org-clock-heading))))

  (add-hook 'org-pomodoro-break-finished-hook
            (lambda ()
              (interactive)
              (org-pomodoro)))
#+end_src
**** Capture Templates
- Todo template
  #+BEGIN_SRC emacs-lisp
    (setq org-capture-templates '(("t" "Todo"
                                          entry
                                          (file org-index-file)
                                          "* TODO %^{Todo} %^G \nSCHEDULED: %^{Schedule}T DEADLINE: %^{Deadline}T \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%?")))
  #+END_SRC
- Books template
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-capture-templates '("B" "Books"
                                          entry
                                          (file "books.org")
                                          "* BOOK %^{Title} %^g \n:PROPERTIES:\n:CREATED: %U\n:AUTHOR: %^{Author} \n:FILENAME: %^{Filename} \n:END:\n%?"))
  #+END_SRC
- Journal template
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-capture-templates '("j" "Journal Entry"
                                          entry
                                          (file+olp+datetree org-journal-file)
                                          "** %U %^{Title}\n%?"))
  #+END_SRC
- Papers template
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-capture-templates '("P" "Paper"
                                          entry
                                          (file "papers.org")
                                          "* PAPER %^{Title} %^g \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n** Authors\n%^{Authors}\n** Location\n%?"))
  #+END_SRC
Set org-refile-targets to the agenda files
#+BEGIN_SRC emacs-lisp
(setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
#+END_SRC
**** Keybindings
Some basic keybindings
#+BEGIN_SRC emacs-lisp
  (defun strange-loop/agenda (&optional split)
    "Visit the org agenda, in the current window or a SPLIT."
    (interactive "P")
    (org-agenda nil "d")
    (when (not split)
      (delete-other-windows)))
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cd" 'strange-loop/agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC
Hitting =C-c C-x C-s= should mark my todo as done and move it to =archive.org=
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-c C-x C-s") 'done-and-dusted)
#+END_SRC
I want to open my index file using =C-c i=
#+BEGIN_SRC emacs-lisp
(defun strange-loop/open-index ()
  "Open the master org TODO list."
  (interactive)
  (find-file org-index-file)
  (end-of-buffer))
(global-set-key (kbd "C-c i") 'strange-loop/open-index)
#+END_SRC
I want to open the books database using =C-c b=
#+BEGIN_SRC emacs-lisp
(defun strange-loop/open-book ()
  "Open the books database."
  (interactive)
  (find-file "~/org/books.org")
  (end-of-buffer))
(global-set-key (kbd "C-c b") 'strange-loop/open-book)
#+END_SRC
I want to open my journal using =C-c j= and switch using =C-x j=
#+BEGIN_SRC emacs-lisp
  (defun strange-loop/open-journal ()
    "Output the journal"
    (interactive)
    (message org-journal-file))
  (defun strange-loop/switch-journal ()
    "Switch between journals located at ~/org/journals"
    (interactive)
    (setq org-journal-file (read-file-name "Journal: " "~/org/journals/")))
  (global-set-key (kbd "C-c j") 'strange-loop/open-journal)
  (global-set-key (kbd "C-x j") 'strange-loop/switch-journal)
#+END_SRC
*** Org Agenda
Filter =A= priority items from the complete TODO list
#+begin_src emacs-lisp
  (defun strange-loop/skip-subtree-if-priority (priority)
    "Skip an agenda subtree if it has a priority of PRIORITY.

  PRIORITY may be one of the characters ?A, ?B, or ?C."
    (let ((subtree-end (save-excursion (org-end-of-subtree t)))
          (pri-value (* 1000 (- org-lowest-priority priority)))
          (pri-current (org-get-priority (thing-at-point 'line t))))
      (if (= pri-value pri-current)
          subtree-end
        nil)))
#+end_src
Custom agenda view
#+begin_src emacs-lisp
  (setq org-agenda-custom-commands
        '(("d" "Daily agenda and all TODOs"
           ((tags "PRIORITY=\"A\""
                  ((org-agenda-skip-function '(org-agenda-skip-entry-if 'todo 'done))
                   (org-agenda-overriding-header "High-priority unfinished tasks:")))
            (tags "coursework"
                  ((org-agenda-overriding-header "Course Related Items")))
            (tags "work"
                  ((org-agenda-overriding-header "Work Related Items")))
            (agenda "" ((org-agenda-span 1)))
            (alltodo ""
                     ((org-agenda-skip-function '(strange-loop/skip-subtree-if-priority ?A))
                      (org-agenda-overriding-header "All normal priority tasks:")))))))
#+end_src
Setup captures in org agenda
#+begin_src emacs-lisp
  (define-key org-agenda-mode-map "c" 'org-capture)
#+end_src
We want sticky agendas
#+begin_src emacs-lisp
  (setq org-agenda-sticky t)
#+end_src
*** Notes
Use =org-noter= to make notes
#+BEGIN_SRC emacs-lisp
  (use-package org-noter
      :after org
      :ensure t
      :config (setq org-noter-default-notes-file-names '("notes.org")
                    org-noter-notes-search-path '("~/org/notes")
                    org-noter-separate-notes-from-heading t))
#+END_SRC

*** Export
Allow =babel= to evaluate emacs lisp, python, C, C++, OCaml and gnuplot code
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)
       (C . t)
       (ocaml . t)
       (gnuplot . t))))
#+END_SRC
Make =babel= evaluate code blocks without confirmation
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC
Open the exported HTML files in FireFox
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
(setenv "BROWSER" "firefox")
#+END_SRC
Org Beamer export
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (require 'ox-beamer))
#+END_SRC
Get easy templates back
#+BEGIN_SRC emacs-lisp
  (setq org-structure-template-alist '(("a" . "abstract")
                                       ("c" . "center")
                                       ("C" . "comment")
                                       ("e" . "example")
                                       ("E" . "export")
                                       ("h" . "export html")
                                       ("l" . "export latex")
                                       ("q" . "quote")
                                       ("s" . "src")
                                       ("v" . "verse")))

  (require 'org-tempo)
#+END_SRC
BibTex export
#+begin_src emacs-lisp
  (require 'ox-bibtex)
  (setq org-latex-pdf-process '("texi2dvi -p -b -V %f"))
  (require 'ox-extra)
  (ox-extras-activate '(ignore-headlines))
#+end_src
Clean-up functions for RE publish
#+begin_src emacs-lisp
    (defun re-html-publish-cleanup (props)
      "Remove all unnecessary html files after publishing RE"
      (delete-file "~/courses/RE7/ref.html")
      (delete-file "~/courses/RE7/ref_bib.html"))

    (defun re-latex-publish-cleanup (props)
      "Remove all unnecessary files after publishing RE to pdf"
      (delete-file "~/courses/RE7/index.bbl")
      (delete-file "~/courses/RE7/index.pdf")
      (delete-file "~/courses/RE7/index.tex")
      (mapc 'delete-file (directory-files-recursively "~/courses/RE7/notes" ".pdf$"))
      (mapc 'delete-file (directory-files-recursively "~/courses/RE7/notes" ".tex$")))
#+end_src
Publishing export
#+begin_src emacs-lisp
  (setq org-publish-project-alist
        '(("html-notes"
           :base-directory "~/courses/RE7/"
           :exclude "README.org"
           :with-properties t
           :recursive t
           :html-doctype "html5"
           :publishing-directory "~/courses/RE7/docs"
           :publishing-function org-html-publish-to-html
           :section-numbers 3
           :with-title t
           :with-toc nil
           :with-latex t
           :html-head
           "<link rel=\"stylesheet\" type=\"text/css\" href=\"https://gongzhitaao.org/orgcss/org.css\">"
           :html-head-extra
           "<style>.MathJax_Display{margin: 1em 0em !important;}</style>"
           :html-postamble
           "<span class=\"author\">%a</span> / <span class=\"date\">%T</span>"
           :headline-levels 4)
          ("bib-html-copy"
           :base-directory "~/courses/RE7/"
           :base-extension "html"
           :publishing-directory "~/courses/RE7/docs"
           :publishing-function org-publish-attachment
           :completion-function re-html-publish-cleanup
           )
          ("pdf-notes"
           :base-directory "~/courses/RE7/"
           :exclude "README.org"
           :with-tags nil
           :with-properties nil
           :recursive t
           :publishing-directory "~/courses/RE7/pdfs"
           :publishing-function org-latex-publish-to-pdf
           :completion-function re-latex-publish-cleanup
           :section-numbers 3
           :with-title t
           :with-toc nil
           :headline-levels 4)
          ("re-publish"
           :components
           ("html-notes" "bib-html-copy" "pdf-notes"))))
#+end_src
Utility function for making RE note
#+begin_src emacs-lisp
  (defun strange-loop/re-make-note ()
    (interactive)
    (let ((note-file (read-string "File: "))
          (note-title (read-string "Title: ")))
      (progn
        (with-temp-file
            (expand-file-name (format "%s.org" note-file) "~/courses/RE7/notes/")
          (insert
           (format "#+TITLE: %s\n#+LATEX_HEADER: \\usepackage{parskip}" note-title)))
        (find-file
         (expand-file-name (format "%s.org" note-file) "~/courses/RE7/notes/")))))
#+end_src
*** Help
I have a file on my orgfiles which is a document on the keybindings in org. I want to open it quickly.
#+BEGIN_SRC emacs-lisp
(defun strange-loop/open-org-help ()
  "Open my org mode help file"
  (interactive)
  (find-file "~/org/org-cheat-sheet.org")
  (end-of-buffer))
(global-set-key (kbd "C-c h") 'strange-loop/open-org-help)
#+END_SRC
** Completion
I use =company= for an inline completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer t
  :init
  (global-company-mode)
  :config
  (setq company-idle-delay 0.4)
  (setq company-selection-wrap-around t)
  (define-key company-active-map (kbd "jk") 'company-abort)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC

** Config Sugar
Make all prompts y or n instead of yes or no
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
Open my config quickly
#+BEGIN_SRC emacs-lisp
(defun strange-loop/open-config ()
  "Open the config file"
  (interactive)
  (find-file "~/.emacs.d/config.org")
  (end-of-buffer))
(global-set-key (kbd "C-c e") 'strange-loop/open-config)
#+END_SRC
Refresh the configuration inplace without restarting emacs
#+BEGIN_SRC emacs-lisp
  (defun strange-loop/reload-config ()
    "Reload config on the fly without restarting emacs"
    (interactive)
    (load-file "~/.emacs.d/init.el")
    (message "Reloaded Config"))
  (global-set-key (kbd "C-c f") 'strange-loop/reload-config)
#+END_SRC
