* fiddler-emacs
** Setup =package.el=
Load =package.el=
#+BEGIN_SRC emacs-lisp
(require 'package)
#+END_SRC
Add common package archives
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "http://stable.melpa.org/packages/"))
#+END_SRC
Ensure that packages aren't loaded again after processing the init file
#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
#+END_SRC
Initialize the package installation
#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC
Customize puts a lot of stuff into my =init.el=
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_SRC
** Configure =use-package=
Install =use-package= if not installed
#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
#+END_SRC
Load =use-package= while compiling
#+BEGIN_SRC emacs-lisp
(eval-when-compile
  (require 'use-package))
#+END_SRC
** Tell Emacs who I am
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Anirudh C"
      user-mail-address "anirudh.c@iiitb.org")
#+END_SRC
** Cosmetics
I don't like the default startup area message
#+BEGIN_SRC emacs-lisp
(defun display-startup-echo-area-message ()
  (message "Welcome to Fiddler-Emacs"))
#+END_SRC
*** Theme
I need emacs to look exactly like I want it to, so
start by removing the default startup buffer
#+BEGIN_SRC emacs-lisp
(setq inhibit-splash-screen t
      inhibit-startup-message t
      inhibit-startup-echo-area-message t)
#+END_SRC
Also remove the scrollbar, menubar and toolbar
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(when (boundp 'scroll-bar-mode)
  (scroll-bar-mode -1))
#+END_SRC 
When I use emacs I deal with a lot of parentheses, I want emacs
to match them for me and do it colourfully
#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
(use-package rainbow-delimiters
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode))
#+END_SRC
I also use tabs(size 4) in emacs but I don't want TeX to get confused
#+BEGIN_SRC emacs-lisp
(setq-default indent-tabs-mode nil)
(setq tab-width 4)
#+END_SRC
I also don't want emacs telling me I'm opening a large file
#+BEGIN_SRC emacs-lisp
(setq large-file-warning-threshold nil)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC
I also want emacs to tell me which column I am in the buffer
#+BEGIN_SRC emacs-lisp
(column-number-mode t)
#+END_SRC
I don't like trailing whitespaces as it messes so many things up
#+BEGIN_SRC emacs-lisp
(defun my/buf-show-trailing-whitespace ()
  (interactive)
    (setq show-trailing-whitespace t))
(add-hook 'prog-mode-hook 'my/buf-show-trailing-whitespace)
#+END_SRC 
Now for the major cosmetic changes. Set doom-dracula theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t
        doom-themes-enable-italic t)
  (load-theme 'doom-dracula t)
  (doom-themes-org-config))
#+END_SRC
*** Modeline
Dependencies
#+BEGIN_SRC emacs-lisp
(use-package shrink-path
             :ensure t)
(use-package all-the-icons
             :ensure t)
(use-package eldoc-eval
             :ensure t)
#+END_SRC
#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
      :ensure t
      :defer t
      :requires (shrink-path eldoc-eval)
      :hook (after-init . doom-modeline-init))
#+END_SRC
** User Interface
First I need to address the fact that I use Alt for my window manager.
#+BEGIN_SRC emacs-lisp
(setq x-super-keysym 'meta)
#+END_SRC
Also I need to be able to edit my config in emacs and restart emacs
in emacs
#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :ensure t)
#+END_SRC
Make a sratch buffer from thin air
#+BEGIN_SRC emacs-lisp
(defun gen-scratch ()
  "Create and switch to a temporary scratch buffer with a random name."
  (interactive)
  (switch-to-buffer (make-temp-name "scratch-")))
(global-set-key (kbd "C-s") 'gen-scratch)
#+END_SRC
Perform easy buffer navigation
#+BEGIN_SRC emacs-lisp
;; This needs to be loaded before the buffer navigation mapping.
(require 'evil-states)
(require 'evil-commands)
;; The actual mapping
(define-key evil-normal-state-map (kbd "{") 'evil-next-buffer)
(define-key evil-normal-state-map (kbd "}") 'evil-prev-buffer)
#+END_SRC
Start a server so that I can connect via emacsclient
#+BEGIN_SRC emacs-lisp
(server-start)
#+END_SRC
*** Evil
I need vim within emacs to edit text efficiently
#+BEGIN_SRC emacs-lisp
(use-package evil
  :ensure t
  :config (evil-mode))
#+END_SRC 
I need to be able to use vim's composability for commands
#+BEGIN_SRC emacs-lisp
(use-package evil-leader
  :ensure t
  :config
  ;; Load evil mode everywhere
  (global-evil-leader-mode)
  ;; Set the default leader key to , instead of \.
  (evil-leader/set-leader ","))
#+END_SRC
I also have some trusty plugins in vim, which I can use here
#+BEGIN_SRC emacs-lisp
;; I want to comment stuff easily
(use-package evil-nerd-commenter
  :ensure t
  :config
  ;; Setup the default hotkeys for me
  (evilnc-default-hotkeys))
;; I want to be able to delete limiters with vim text object like
;; motions
(use-package evil-surround
  :ensure t
  :config (global-evil-surround-mode 1))
;; I also need emacs to complete my parentheses as and when I want
(use-package smartparens
  :ensure t
  :config
  (require 'smartparens-config)
  (smartparens-global-mode))
;; I press Esc a lot. Let's make that easy once and for all
(use-package evil-escape
  :ensure t
  :config
  (evil-escape-mode)
  (setq-default evil-escape-key-sequence "jk"))
;; I tend to do a lot of re-factoring wish I had more cursors
(use-package multiple-cursors
  :ensure t)
;; In a large buffer I need to jump to a particular place easily  
(use-package evil-easymotion
  :ensure t
  :config
  (evilem-default-keybindings "SPC"))
#+END_SRC
*** Helm
While using emacs I tend to view a lot off lists.
Wish I could fuzzy search all of them and narrow them down
#+BEGIN_SRC emacs-lisp
(use-package helm
  :ensure t
  ;; Change normal M-x to helm's M-x
  :bind (("M-x" . helm-M-x))
  :config
  ;; Start helm-mode always
  (helm-mode 1)
  ;; Do fuzzy matching as and when possible
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  ;; Aid the fuzzy matching by reducing the number of candidates
  (setq helm-candidate-number-limit 40)
  ;; Resize the helm buffer to make the overall experience neat.
  (setq helm-autoresize-mode t))
#+END_SRC
I tend not to use splits or tabs because there is so much you can do with just buffers. 
But the default buffer management system using =(list-buffers)= is horrendous, so I use helm there
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'helm-mini)
(global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC
*** Projects
I use git to manage my projects and I need emacs to integrate a
git porcelain framework for me to us
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t)
(global-set-key (kbd "C-x g") 'magit)
;; I want to use vim bindings here as well
(use-package evil-magit
  :ensure t)
;; I need to search for files in a project
(use-package projectile
  :ensure t
  :config (projectile-mode))
;; I need helm to work here as well  
(use-package helm-projectile
  :ensure t)
#+END_SRC
I also don't need backup and autosave files because I use git
#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil
      auto-save-default nil)
#+END_SRC
** Environments
*** Markdown
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t
  :commands (markdown-mode gfm-mode)
  ;; Tell emacs to use different modes for different types of markdown files,
  ;; that is, use github flavoured markdown for my READMEs and normal markdown everywhere else.
  :mode (("README\\.md\\'" . gfm-mode)
         ("\\.md\\'" . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :init (setq markdown-command "multimarkdown"))
#+END_SRC
*** Web
I do some web development and hence I need some help there
#+BEGIN_SRC emacs-lisp
;; Understand css
(use-package rainbow-mode
  :ensure t)
(use-package css-mode
  :ensure t
  :config
  ;; hook to get colors in css
  (add-hook 'css-mode-hook (lambda ()
(rainbow-mode))))
;; Improve HTML and CSS workflow
(use-package emmet-mode
  :ensure t
  :commands emmet-mode)
;; HTML template editing  
(use-package web-mode
  :ensure t
  :defer t
  :config
  ;; Indent all my web mode code by 2 instead of 4
  (setq web-mode-attr-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-indent-style 2)
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-sql-indent-offset 2))
;; Some JS help
(use-package js2-mode
  :ensure t)
#+END_SRC
Setup impatient mode
Dependencies:
#+BEGIN_SRC emacs-lisp
(use-package simple-httpd
  :ensure t)
(use-package htmlize
  :ensure t)
#+END_SRC
Impatient Mode
#+BEGIN_SRC emacs-lisp
(use-package impatient-mode
  :ensure t)
#+END_SRC
*** Clojure
Install Clojure mode
#+BEGIN_SRC emacs-lisp
(use-package clojure-mode
  :ensure t)
#+END_SRC
Install CIDER
#+BEGIN_SRC emacs-lisp
(use-package cider
  :ensure t)
#+END_SRC
*** PDF
Install and configure pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :ensure t
  :config
  (pdf-tools-install)
  (setq-default pdf-view-display-size 'fit-width))
#+END_SRC
*** Speed Typing
Install emacs speed type
#+BEGIN_SRC emacs-lisp
(use-package speed-type
  :ensure t)
#+END_SRC
** Org Mode
*** Display
How I want org-mode to look
#+BEGIN_SRC emacs-lisp
;; Tell emacs to start org mode in all .org files
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
;; Hide the leading stars and start org mode with indented structure
(setq org-hide-leading-stars t org-startup-indented t)
;; Use the nice down arrow to display folded content in org headlines
(setq org-ellipsis "â¤µ")
#+END_SRC
*** Tasks and Org-Capture
**** Basic Setup
I have all my org files in a directory =~/org/= and I also have an index file which has all my TODOs in an outline and
I also have an archive file to archive my completed TODOs. I have a special file for my ideas which are basically TODOs without a deadline
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/org")
#+END_SRC
I need a helper function to point to my orgfiles' absolute path using the relative path
#+BEGIN_SRC emacs-lisp
(defun org-file-path (filename)
  "Return the absolute address of an org file, given its relative name."
  (concat (file-name-as-directory org-directory) filename))
#+END_SRC
Now I can set my index file location and ideas file location
#+BEGIN_SRC emacs-lisp
(setq org-index-file (org-file-path "index.org"))
(setq org-idea-file (org-file-path "ideas.org"))
(setq org-projects-file (org-file-path "projects.org"))
#+END_SRC
I can also setup my archive file
#+BEGIN_SRC emacs-lisp
(setq org-archive-location
      (concat (org-file-path "archive.org") "::* From %s"))
#+END_SRC
I need org-agenda to tell me my TODOs from =index.org=
#+BEGIN_SRC emacs-lisp
(setq org-agenda-files (list org-index-file org-idea-file org-projects-file))
#+END_SRC
I want to archive my TODOs into =archive.org= when I finish them
#+BEGIN_SRC emacs-lisp
(defun done-and-dusted ()
  "Mark the state of an org-mode item as DONE and archive it."
  (interactive)
  (org-todo 'done)
  (org-archive-subtree))
#+END_SRC
I want to know when I did these tasks as well
#+BEGIN_SRC emacs-lisp
(setq org-log-done 'time)
#+END_SRC
I need to start adding text immediately when I start an org capture template (Insert mode)
#+BEGIN_SRC emacs-lisp
(add-hook 'org-capture-mode-hook 'evil-insert-state)
#+END_SRC
**** Capture Templates
- Todo template
  #+BEGIN_SRC emacs-lisp
    (setq org-capture-templates '(("t" "Todo"
                                          entry
                                          (file org-index-file)
                                          "* TODO %^{Todo} %^G \nDEADLINE: %^{Deadline}t \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%?")))
  #+END_SRC
- Idea template
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-capture-templates '("i" "Idea"
                                          entry
                                          (file "ideas.org")
                                          "* TODO %^{Todo} %^G \n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%?"))
  #+END_SRC
- Books template
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-capture-templates '("b" "Books"
                                          table-line
                                          (file "books.org")
                                          "| %^{Title} | %^{Author} | %^{Category} | %^L |"))
  #+END_SRC
- Journal template
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-capture-templates '("j" "Journal Entry"
                                          entry
                                          (file+olp+datetree "journal.org")
                                          "** %U %^{Title}\n%?"))
  #+END_SRC
- Project template
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'org-capture-templates '("p" "Project"
                                          entry
                                          (file "projects.org")
                                          "* PROJECT %^{Title} %^G\n%?"))
  #+END_SRC
**** Keybindings
Some basic keybindings
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-cc" 'org-capture)
#+END_SRC
Hitting =C-c C-x C-s= should mark my todo as done and move it to =archive.org=
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map (kbd "C-c C-x C-s") 'done-and-dusted)
#+END_SRC
I want to open my index file using =C-c i=
#+BEGIN_SRC emacs-lisp
(defun open-index ()
  "Open the master org TODO list."
  (interactive)
  (find-file org-index-file)
  (end-of-buffer))
(global-set-key (kbd "C-c i") 'open-index)
#+END_SRC
I want to open the books database using =C-c b=
#+BEGIN_SRC emacs-lisp
(defun open-book ()
  "Open the books database."
  (interactive)
  (find-file "~/org/books.org")
  (end-of-buffer))
(global-set-key (kbd "C-c b") 'open-book)
#+END_SRC
I want to open my journal using =C-c j=
#+BEGIN_SRC emacs-lisp
(defun open-journal ()
  "Open the master org TODO list."
  (interactive)
  (find-file "~/org/journal.org")
  (end-of-buffer))
(global-set-key (kbd "C-c j") 'open-journal)
#+END_SRC
Org Agenda has extremely confusing keybindings
#+BEGIN_SRC emacs-lisp
(eval-after-load 'org-agenda
 '(progn
    (evil-set-initial-state 'org-agenda-mode 'normal)
    (evil-define-key 'normal org-agenda-mode-map
      (kbd "<RET>") 'org-agenda-switch-to
      (kbd "\t") 'org-agenda-goto

      "q" 'org-agenda-quit
      "r" 'org-agenda-redo
      "S" 'org-save-all-org-buffers
      "gj" 'org-agenda-goto-date
      "gJ" 'org-agenda-clock-goto
      "gm" 'org-agenda-bulk-mark
      "go" 'org-agenda-open-link
      "s" 'org-agenda-schedule
      "+" 'org-agenda-priority-up
      "," 'org-agenda-priority
      "-" 'org-agenda-priority-down
      "y" 'org-agenda-todo-yesterday
      "n" 'org-agenda-add-note
      "t" 'org-agenda-todo
      ":" 'org-agenda-set-tags
      ";" 'org-timer-set-timer
      "I" 'helm-org-task-file-headings
      "i" 'org-agenda-clock-in-avy
      "O" 'org-agenda-clock-out-avy
      "u" 'org-agenda-bulk-unmark
      "x" 'org-agenda-exit
      "j"  'org-agenda-next-line
      "k"  'org-agenda-previous-line
      "vt" 'org-agenda-toggle-time-grid
      "va" 'org-agenda-archives-mode
      "vw" 'org-agenda-week-view
      "vl" 'org-agenda-log-mode
      "vd" 'org-agenda-day-view
      "vc" 'org-agenda-show-clocking-issues
      "g/" 'org-agenda-filter-by-tag
      "o" 'delete-other-windows
      "gh" 'org-agenda-holiday
      "gv" 'org-agenda-view-mode-dispatch
      "f" 'org-agenda-later
      "b" 'org-agenda-earlier
      "c" 'helm-org-capture-templates
      "e" 'org-agenda-set-effort
      "n" nil  ; evil-search-next
      "{" 'org-agenda-manipulate-query-add-re
      "}" 'org-agenda-manipulate-query-subtract-re
      "A" 'org-agenda-toggle-archive-tag
      "." 'org-agenda-goto-today
      "0" 'evil-digit-argument-or-evil-beginning-of-line
      "<" 'org-agenda-filter-by-category
      ">" 'org-agenda-date-prompt
      "F" 'org-agenda-follow-mode
      "D" 'org-agenda-deadline
      "H" 'org-agenda-holidays
      "J" 'org-agenda-next-date-line
      "K" 'org-agenda-previous-date-line
      "L" 'org-agenda-recenter
      "P" 'org-agenda-show-priority
      "R" 'org-agenda-clockreport-mode
      "Z" 'org-agenda-sunrise-sunset
      "T" 'org-agenda-show-tags
      "X" 'org-agenda-clock-cancel
      "[" 'org-agenda-manipulate-query-add
      "g\\" 'org-agenda-filter-by-tag-refine
"]" 'org-agenda-manipulate-query-subtract)))
#+END_SRC
The calendar in emacs has confusing keybindings as well.
#+BEGIN_SRC emacs-lisp
(define-minor-mode evil-calendar-mode
  "Minor-mode for evil calendar integration.
Active when in Emacs' `calendar-mode'."
  :keymap (make-sparse-keymap))

(add-hook 'calendar-mode-hook 'evil-calendar-mode)

;;;; Movement

;;; Forward/Backwards

(evil-define-key 'motion evil-calendar-mode-map
  ;; Forward/Backward
  "l" 'calendar-forward-day
  ")" 'calendar-forward-week
  "}" 'calendar-forward-month
  "]]" 'calendar-forward-year
  "h" 'calendar-backward-day
  "(" 'calendar-backward-week
  "{" 'calendar-backward-month
  "[[" 'calendar-backward-year
  ;; Beginning/End
  "b" 'calendar-beginning-of-week
  "B" 'calendar-beginning-of-month
  "^" 'calendar-beginning-of-year
  "e" 'calendar-end-of-week
  "E" 'calendar-end-of-month
"$" 'calendar-end-of-year)
#+END_SRC
*** Notes and Org-Drill
I want to be able to learn from my notes, that is, I want to Emacs to drill my notes so that I can learn
First I need to setup a method to generate the note filename on the fly.
#+BEGIN_SRC emacs-lisp
(defun generate-note ()
  "Generate a note in the notes directory"
  (setq note-name (read-string "File: "))
  (expand-file-name (format "%s.org" note-name) "~/org/notes/"))
#+END_SRC
After this I need to generate the template that has to be inserted
#+BEGIN_SRC emacs-lisp
(defun generate-note-template ()
  "Generate the template for the note without the timestamp"
  (concat (format "#+TITLE: %s" note-name) "\n#+AUTHOR: Anirudh C\n" (format "\n* %s" note-name)))
#+END_SRC
Notes template
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-capture-templates '("n" "Notes"
                                       plain
                                       (file generate-note)
                                       ;; Add timestamp
                                       "%(concat (generate-note-template) \"\n:PROPERTIES:\n:CREATED: %U\n:END:\n\n%?\")"))
#+END_SRC
Now for org drill
#+BEGIN_SRC emacs-lisp
(use-package org-drill
  :defer t
  :ensure org-plus-contrib
  :commands (org-drill)
  :init (require 'cl)
  :config
  (setq org-drill-use-visible-cloze-face-p t)
  (setq org-drill-hide-item-headings-p t)
  )
#+END_SRC
*** Habits
Install org-habit
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-modules 'org-habit)
(require 'org-habit)
#+END_SRC
Template for capturing habits
#+BEGIN_SRC emacs-lisp
;; Generate the scheduled timestamp
(defun gen-habit-timestamp ()
  (org-insert-time-stamp (org-read-date nil t) t nil nil nil " .+1d"))
;; Generate the properties for the habit
(defun gen-habit-props ()
  '"\n:LOGBOOK:\n:END:\n:PROPERTIES:\n:STYLE: habit\n:END:\n")
(add-to-list 'org-capture-templates '("h" "Habit"
                                      entry
                                      (file+headline org-index-file "Habits")
                                      "** TODO %^{Title} \nSCHEDULED: %(gen-habit-timestamp) %(gen-habit-props) %?"))
#+END_SRC
*** Org Brain
I use org brain for concept mapping
#+BEGIN_SRC emacs-lisp
(use-package org-brain
  :ensure t
  :init
  (setq org-brain-path "~/brain")
  :config
  (setq org-id-track-globally t)
  (setq org-id-locations-file "~/.emacs.d/.org-id-locations")
  (with-eval-after-load 'evil
    (evil-set-initial-state 'org-brain-visualize-mode 'normal)))
(global-set-key (kbd "C-;") 'org-brain-visualize)
#+END_SRC
I want to have a nice looking map
#+BEGIN_SRC emacs-lisp
(use-package ascii-art-to-unicode
  :ensure t)

;; Function to convert all ascii to unicode in the buffer
(defun aa2u-buffer ()
  (aa2u (point-min) (point-max)))
;; Run the conversion after visualizing org-brain
(add-hook 'org-brain-after-visualize-hook #'aa2u-buffer)
#+END_SRC
Convert org-brain to evil mode
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "p" 'org-brain-add-parent)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "P" 'org-brain-remove-parent)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "c" 'org-brain-add-child)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "C" 'org-brain-remove-child)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "h" 'org-brain-new-child)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "n" 'org-brain-pin)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "t" 'org-brain-set-title)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "j" 'forward-button)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "k" 'backward-button)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "o" 'org-brain-goto-current)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "O" 'org-brain-goto)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "v" 'org-brain-visualize)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "f" 'org-brain-add-friendship)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "F" 'org-brain-remove-friendship)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "d" 'org-brain-delete-entry)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "l" 'org-brain-add-resource)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "a" 'org-brain-visualize-attach)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "A" 'org-brain-archive)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "b" 'org-brain-visualize-back)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "\C-y" 'org-brain-visualize-paste-resource)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "T" 'org-brain-set-tags)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "q" 'org-brain-visualize-quit)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "r" 'org-brain-visualize-random)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "R" 'org-brain-visualize-wander)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "m" 'org-brain-visualize-mind-map)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "+" 'org-brain-visualize-add-grandchild)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "-" 'org-brain-visualize-remove-grandchild)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "z" 'org-brain-visualize-add-grandparent)
(evil-leader/set-key-for-mode 'org-brain-visualize-mode "Z" 'org-brain-visualize-remove-grandparent)
#+END_SRC
*** Export
Allow =babel= to evaluate emacs lisp, python, C, C++ and gnuplot code
#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (python . t)
   (C . t)
   (gnuplot . t)))
#+END_SRC
I want tabs in the code blocks to behave similar to the correspoding major mode
#+BEGIN_SRC emacs-lisp
(setq org-src-tab-acts-natively t)
#+END_SRC
Make =babel= evaluate code blocks without confirmation
#+BEGIN_SRC emacs-lisp
(setq org-confirm-babel-evaluate nil)
#+END_SRC
Remove the footer in HTML exports
#+BEGIN_SRC emacs-lisp
(setq org-html-postamble nil)
#+END_SRC
Open the exported HTML files in FireFox
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-generic
      browse-url-generic-program "firefox")
(setenv "BROWSER" "firefox")
#+END_SRC
*** Help
I have a file on my orgfiles which is a document on the keybindings in org. I want to open it quickly.
#+BEGIN_SRC emacs-lisp
(defun open-org-help ()
  "Open my org mode help file"
  (interactive)
  (find-file "~/org/org-cheat-sheet.org")
  (end-of-buffer))
(global-set-key (kbd "C-c h") 'open-org-help)
#+END_SRC
** Email
Install mu4e
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/mu4e")
(require 'mu4e)
#+END_SRC
Set the mail directory
#+BEGIN_SRC emacs-lisp
(setq mu4e-maildir (expand-file-name "~/email/outlook"))
#+END_SRC
Make eww open links
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'eww-browse-url)
#+END_SRC
Add the sub directories
#+BEGIN_SRC emacs-lisp
(setq mu4e-drafts-folder "/DRAFTS")
(setq mu4e-sent-folder   "/SENT")
(setq mu4e-trash-folder  "/DELETED")
(setq message-signature-file "~/.emacs.d/.signature") ; put your signature in this file
#+END_SRC
Get the emails
#+BEGIN_SRC emacs-lisp
(setq mu4e-get-mail-command "mbsync -c ~/.emacs.d/.mbsyncrc uni"
      mu4e-html2text-command 'mu4e-shr2text
      mu4e-update-interval 120
      mu4e-headers-auto-update t)
#+END_SRC
Set some general settings
#+BEGIN_SRC emacs-lisp
(setq mu4e-date-format-long "%Y-%m-%d %H:%M:%S")
(setq mu4e-headers-date-format "%y%m%d %H:%M:%S")
(setq mu4e-reply-to-address "anirudh.c@iiitb.org"
    user-mail-address "anirudh.c@iiitb.org"
    user-full-name  "Anirudh C")

;; Images
(setq mu4e-show-images t)
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))
#+END_SRC
Sending Emails
#+BEGIN_SRC emacs-lisp
(require 'smtpmail)

; smtp
(setq message-send-mail-function 'smtpmail-send-it
      smtpmail-starttls-credentials
      '(("smtp.office365.com" 587 nil nil))
      smtpmail-default-smtp-server "smtp.office365.com"
      smtpmail-smtp-server "smtp.office365.com"
      smtpmail-smtp-service 587
      smtpmail-debug-info t)
#+END_SRC
Evil keybindings 
#+BEGIN_SRC emacs-lisp
(use-package evil-mu4e
  :ensure t)
#+END_SRC
Open mu4e when I press =C-c m=
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c m") 'mu4e)
#+END_SRC
** Hydra
Create menus to hint at keybindings where keybindings are a pain
#+BEGIN_SRC emacs-lisp
;; Install hydra
(use-package hydra
  :ensure t)
#+END_SRC
Hydras that I need
*** Dired
Press =.= in a dired buffer..
#+BEGIN_SRC emacs-lisp
(defhydra hydra-dired (:hint nil :color pink)
  "
_+_ mkdir          _v_iew           _m_ark             _(_ details        _i_nsert-subdir    wdired
_C_opy             _O_ view other   _U_nmark all       _)_ omit-mode      _$_ hide-subdir    C-x C-q : edit
_D_elete           _o_pen other     _u_nmark           _l_ redisplay      _w_ kill-subdir    C-c C-c : commit
_R_ename           _M_ chmod        _t_oggle           _g_ revert buf     _e_ ediff          C-c ESC : abort
_Y_ rel symlink    _G_ chgrp        _E_xtension mark   _s_ort             _=_ pdiff
_S_ymlink          ^ ^              _F_ind marked      _._ toggle hydra   \\ flyspell
_r_sync            ^ ^              ^ ^                ^ ^                _?_ summary
_z_ compress-file  _A_ find regexp
_Z_ compress       _Q_ repl regexp

T - tag prefix
"
  ("\\" dired-do-ispell)
  ("(" dired-hide-details-mode)
  (")" dired-omit-mode)
  ("+" dired-create-directory)
  ("=" diredp-ediff)         ;; smart diff
  ("?" dired-summary)
  ("$" diredp-hide-subdir-nomove)
  ("A" dired-do-find-regexp)
  ("C" dired-do-copy)        ;; Copy all marked files
  ("D" dired-do-delete)
  ("E" dired-mark-extension)
  ("e" dired-ediff-files)
  ("F" dired-do-find-marked-files)
  ("G" dired-do-chgrp)
  ("g" revert-buffer)        ;; read all directories again (refresh)
  ("i" dired-maybe-insert-subdir)
  ("l" dired-do-redisplay)   ;; relist the marked or singel directory
  ("M" dired-do-chmod)
  ("m" dired-mark)
  ("O" dired-display-file)
  ("o" dired-find-file-other-window)
  ("Q" dired-do-find-regexp-and-replace)
  ("R" dired-do-rename)
  ("r" dired-do-rsynch)
  ("S" dired-do-symlink)
  ("s" dired-sort-toggle-or-edit)
  ("t" dired-toggle-marks)
  ("U" dired-unmark-all-marks)
  ("u" dired-unmark)
  ("v" dired-view-file)      ;; q to exit, s to search, = gets line #
  ("w" dired-kill-subdir)
  ("Y" dired-do-relsymlink)
  ("z" diredp-compress-this-file)
  ("Z" dired-do-compress)
  ("q" nil)
  ("." nil :color blue))

(define-key dired-mode-map "." 'hydra-dired/body)
#+END_SRC
** Completion
I use company for an inline completion
#+BEGIN_SRC emacs-lisp
(use-package company
  :ensure t
  :defer t
  :init
  (global-company-mode)
  :config
  (setq company-idle-delay 0.4)
  (setq company-selection-wrap-around t)
  (define-key company-active-map (kbd "jk") 'company-abort)
  (define-key company-active-map (kbd "C-n") 'company-select-next)
  (define-key company-active-map (kbd "C-p") 'company-select-previous))
#+END_SRC
** Config Sugar
Make all prompts y or n instead of yes or no
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
Open my config quickly
#+BEGIN_SRC emacs-lisp
(defun open-config ()
  "Open the config file"
  (interactive)
  (find-file "~/.emacs.d/config.org")
  (end-of-buffer))
(global-set-key (kbd "C-c e") 'open-config)
#+END_SRC
Refresh the configuration inplace without restarting emacs
#+BEGIN_SRC emacs-lisp
(defun reload-config ()
  "Reload config on the fly without restarting emacs"
  (interactive)
  (load-file "~/.emacs.d/init.el")
  (message "Reloaded Config"))
(global-set-key (kbd "C-c r") 'reload-config)
#+END_SRC
